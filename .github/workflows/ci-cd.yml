name: Django CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Job 1: Tests unitaires et de qualit√©
  test:
    runs-on: ubuntu-latest
    name: Tests et Qualit√© du Code

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: mes_frais
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u test_user -ptest_password --protocol=tcp"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_password
          MONGO_INITDB_DATABASE: mes_frais_logs
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          # Installation de pymongo pour les tests de connectivit√©
          python3 -m pip install --user pymongo

      - name: Create and activate virtualenv
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Wait for services to be ready
        run: |
          echo "Attente que les services soient pr√™ts..."
          
          # Attendre MySQL
          echo "Test de connexion MySQL..."
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -P 3306 -u test_user -ptest_password -e "SELECT 1;" 2>/dev/null; then
              echo "‚úÖ MySQL est pr√™t !"
              break
            fi
            echo "‚è≥ Attente MySQL... ($i/30)"
            sleep 2
          done
          
          # Attendre MongoDB (test avec Python/pymongo)
          echo "Test de connexion MongoDB..."
          for i in {1..20}; do
            if python3 -c "import pymongo; pymongo.MongoClient('mongodb://127.0.0.1:27017/', serverSelectionTimeoutMS=2000).admin.command('ping')" 2>/dev/null; then
              echo "‚úÖ MongoDB est pr√™t !"
              break
            fi
            echo "‚è≥ Attente MongoDB... ($i/20)"
            sleep 3
          done

      - name: Check services
        run: |
          echo "V√©rification finale des services..."
          netstat -tuln | grep :3306 || echo "MySQL port non trouv√©"
          netstat -tuln | grep :27017 || echo "MongoDB port non trouv√©"
          mysql -h 127.0.0.1 -P 3306 -u test_user -ptest_password -e "SELECT 'MySQL OK';"
          python3 -c "import pymongo; print('MongoDB OK:', pymongo.MongoClient('mongodb://127.0.0.1:27017/', serverSelectionTimeoutMS=2000).admin.command('ping'))"

      - name: Setup MySQL permissions for tests
        run: |
          echo "Configuration des permissions MySQL pour les tests..."
          # Connexion en tant que root pour accorder les permissions
          mysql -h 127.0.0.1 -P 3306 -u root -proot_password << 'EOF'
          GRANT ALL PRIVILEGES ON *.* TO 'test_user'@'%' WITH GRANT OPTION;
          GRANT CREATE ON *.* TO 'test_user'@'%';
          GRANT DROP ON *.* TO 'test_user'@'%';
          FLUSH PRIVILEGES;
          SHOW GRANTS FOR 'test_user'@'%';
          EOF
          
          echo "Test de cr√©ation de base de donn√©es par test_user:"
          mysql -h 127.0.0.1 -P 3306 -u test_user -ptest_password -e "CREATE DATABASE IF NOT EXISTS test_verification; DROP DATABASE test_verification; SELECT 'Permissions OK' AS status;"

      - name: Debug database connection
        env:
          SECRET_KEY: test-secret-key-for-github-actions
          DB_NAME: mes_frais
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          MONGODB_HOST: 127.0.0.1
          MONGODB_PORT: 27017
          MONGODB_DATABASE: mes_frais_logs
          MONGODB_USERNAME: test_user
          MONGODB_PASSWORD: test_password
          MONGODB_AUTH_SOURCE: admin
        run: |
          echo "Variables d'environnement pour Django:"
          echo "DB_HOST: $DB_HOST"
          echo "DB_PORT: $DB_PORT"
          echo "DB_NAME: $DB_NAME"
          echo "DB_USER: $DB_USER"
          
          echo "Test final de connectivit√© MySQL avec les m√™mes param√®tres:"
          mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD -e "SHOW DATABASES;" || echo "‚ùå √âchec connexion MySQL"

      - name: Run migrations
        env:
          SECRET_KEY: test-secret-key-for-github-actions
          DB_NAME: mes_frais
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          MONGODB_HOST: 127.0.0.1
          MONGODB_PORT: 27017
          MONGODB_DATABASE: mes_frais_logs
          MONGODB_USERNAME: test_user
          MONGODB_PASSWORD: test_password
          MONGODB_AUTH_SOURCE: admin
        run: |
          source venv/bin/activate
          python manage.py migrate --noinput

      - name: Run tests
        env:
          SECRET_KEY: test-secret-key-for-github-actions
          DB_NAME: mes_frais
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          MONGODB_HOST: 127.0.0.1
          MONGODB_PORT: 27017
          MONGODB_DATABASE: mes_frais_logs
          MONGODB_USERNAME: test_user
          MONGODB_PASSWORD: test_password
          MONGODB_AUTH_SOURCE: admin
        run: |
          source venv/bin/activate
          python manage.py test

  # Job 2: Build et validation du code
  build:
    runs-on: ubuntu-latest
    name: Build et Collecte des Assets
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create and activate virtualenv
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Collect static files
        env:
          SECRET_KEY: test-secret-key-for-github-actions
          DB_NAME: ":memory:"
          DB_USER: ""
          DB_PASSWORD: ""
          DB_HOST: ""
          DB_PORT: ""
          MONGODB_HOST: 127.0.0.1
          MONGODB_PORT: 27017
          MONGODB_DATABASE: mes_frais_logs
          MONGODB_USERNAME: ""
          MONGODB_PASSWORD: ""
          MONGODB_AUTH_SOURCE: ""
        run: |
          source venv/bin/activate
          # Utiliser SQLite en m√©moire pour collectstatic (pas besoin de MySQL)
          python manage.py collectstatic --noinput --settings=core.settings_static

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            static/
            venv/
          key: ${{ runner.os }}-build-${{ github.sha }}

  # Job 3: D√©ploiement sur le serveur
  deploy:
    runs-on: ubuntu-latest
    name: D√©ploiement en Production
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts

          ssh -i ~/.ssh/deploy_key $SERVER_USER@$SERVER_IP << 'EOF'
            cd ${{ secrets.PROJECT_PATH }}
            git pull origin main
            source ${{ secrets.VENV_PATH }}/bin/activate
            pip install -r requirements.txt
            python manage.py migrate --noinput
            python manage.py collectstatic --noinput
            
            # Red√©marrer le service directement
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S /usr/bin/systemctl restart ${{ secrets.SERVICE_NAME }}
            sleep 5
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S /usr/bin/systemctl status ${{ secrets.SERVICE_NAME }} --no-pager
          EOF

  # Job 4: Notification compl√®te du pipeline CI/CD
  notify:
    runs-on: ubuntu-latest
    name: Notification du Pipeline CI/CD
    needs: [test, build, deploy]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Generate notification content
        id: notification
        run: |
          # G√©n√©rer le contenu de la notification
          NOTIFICATION_CONTENT="üöÄ === RAPPORT DU PIPELINE CI/CD ===
          üìã Commit: ${{ github.sha }}
          üë§ Auteur: ${{ github.actor }}
          üìÖ Date: $(date '+%Y-%m-%d %H:%M:%S UTC')
          
          "
          
          # Statut des tests
          if [ "${{ needs.test.result }}" == "success" ]; then
            NOTIFICATION_CONTENT+="‚úÖ TESTS: R√©ussis
            - Tous les tests unitaires ont pass√©
            - Qualit√© du code valid√©e
            "
          elif [ "${{ needs.test.result }}" == "failure" ]; then
            NOTIFICATION_CONTENT+="‚ùå TESTS: √âchec
            - Certains tests ont √©chou√©
            - V√©rifiez les logs des tests
            "
          elif [ "${{ needs.test.result }}" == "cancelled" ]; then
            NOTIFICATION_CONTENT+="‚ö†Ô∏è  TESTS: Annul√©s
            - Les tests ont √©t√© annul√©s
            "
          else
            NOTIFICATION_CONTENT+="‚ùì TESTS: Statut inconnu (${{ needs.test.result }})
            "
          fi
          
          # Statut du build
          if [ "${{ needs.build.result }}" == "success" ]; then
            NOTIFICATION_CONTENT+="‚úÖ BUILD: R√©ussi
            - Assets collect√©s avec succ√®s
            - Application pr√™te pour le d√©ploiement
            "
          elif [ "${{ needs.build.result }}" == "failure" ]; then
            NOTIFICATION_CONTENT+="‚ùå BUILD: √âchec
            - Erreur lors de la collecte des assets
            - V√©rifiez les logs du build
            "
          elif [ "${{ needs.build.result }}" == "cancelled" ]; then
            NOTIFICATION_CONTENT+="‚ö†Ô∏è  BUILD: Annul√©
            - Le build a √©t√© annul√©
            "
          else
            NOTIFICATION_CONTENT+="‚ùì BUILD: Statut inconnu (${{ needs.build.result }})
            "
          fi
          
          # Statut du d√©ploiement
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            NOTIFICATION_CONTENT+="‚úÖ D√âPLOIEMENT: R√©ussi
            - Application d√©ploy√©e en production
            - Service red√©marr√© avec succ√®s
            - Mise √† jour termin√©e
            "
          elif [ "${{ needs.deploy.result }}" == "failure" ]; then
            NOTIFICATION_CONTENT+="‚ùå D√âPLOIEMENT: √âchec
            - Erreur lors du d√©ploiement
            - V√©rifiez les logs de d√©ploiement
            "
          elif [ "${{ needs.deploy.result }}" == "cancelled" ]; then
            NOTIFICATION_CONTENT+="‚ö†Ô∏è  D√âPLOIEMENT: Annul√©
            - Le d√©ploiement a √©t√© annul√©
            "
          else
            NOTIFICATION_CONTENT+="‚ùì D√âPLOIEMENT: Statut inconnu (${{ needs.deploy.result }})
            "
          fi
          
          # R√©sum√© global
          if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
            NOTIFICATION_CONTENT+="üéâ === D√âPLOIEMENT COMPLET R√âUSSI ===
            Tous les √©tapes du pipeline ont √©t√© ex√©cut√©es avec succ√®s !
            L'application est maintenant en production.
            "
            SUBJECT="‚úÖ D√©ploiement r√©ussi - Mes Frais"
          else
            NOTIFICATION_CONTENT+="‚ö†Ô∏è  === PROBL√àME D√âTECT√â ===
            Au moins une √©tape du pipeline a √©chou√©.
            V√©rifiez les logs pour plus de d√©tails.
            "
            SUBJECT="‚ùå √âchec du pipeline CI/CD - Mes Frais"
          fi
          
          NOTIFICATION_CONTENT+="
          üîó Voir les d√©tails: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Sauvegarder dans des variables d'output
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTIFICATION_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "subject=$SUBJECT" >> $GITHUB_OUTPUT
          
          # Afficher dans les logs aussi
          echo "$NOTIFICATION_CONTENT"

      - name: Create deployment status comment
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              per_page: 1
            });
            
            const commit = commits[0];
            const status = '${{ needs.test.result }}' === 'success' && 
                          '${{ needs.build.result }}' === 'success' && 
                          '${{ needs.deploy.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            
            const subject = '${{ steps.notification.outputs.subject }}';
            const content = `${{ steps.notification.outputs.content }}`;
            
            const comment = `## ${subject}

            ${content}

            ---
            *Notification automatique du pipeline CI/CD*`;
            
            try {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: comment
              });
              console.log('‚úÖ Commentaire de statut ajout√© au commit');
            } catch (error) {
              console.log('‚ö†Ô∏è Impossible d\'ajouter le commentaire:', error.message);
            }

      - name: Create deployment summary
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const isSuccess = '${{ needs.test.result }}' === 'success' && 
                             '${{ needs.build.result }}' === 'success' && 
                             '${{ needs.deploy.result }}' === 'success';
            
            const summary = `## üöÄ R√©sum√© du D√©ploiement

            **Statut:** ${isSuccess ? '‚úÖ Succ√®s' : '‚ùå √âchec'}
            **Commit:** \`${{ github.sha }}\`
            **Auteur:** ${{ github.actor }}
            **Date:** ${new Date().toLocaleString('fr-FR')}

            ### üìä D√©tails des √©tapes:
            - **Tests:** ${{ needs.test.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.test.result }}
            - **Build:** ${{ needs.build.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.build.result }}
            - **D√©ploiement:** ${{ needs.deploy.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.deploy.result }}

            üîó [Voir les logs complets](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            try {
              // Cr√©er un commentaire sur le commit
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: summary
              });
              
              // Si c'est un succ√®s, cr√©er aussi un commentaire sur le dernier commit
              if (isSuccess) {
                console.log('üéâ D√©ploiement r√©ussi - Notification ajout√©e au commit');
              } else {
                console.log('‚ö†Ô∏è D√©ploiement √©chou√© - Notification d\'erreur ajout√©e');
              }
            } catch (error) {
              console.log('‚ö†Ô∏è Erreur lors de l\'ajout du commentaire:', error.message);
            }

      - name: Log notification status
        if: always()
        run: |
          echo "üìß === STATUT DES NOTIFICATIONS ==="
          echo "‚úÖ Notifications GitHub natives activ√©es"
          echo "   - Commentaires sur les commits"
          echo "   - R√©sum√©s de d√©ploiement"
          echo "   - Logs d√©taill√©s dans GitHub Actions"
          
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "‚úÖ Commentaire de statut ajout√© au commit"
          else
            echo "‚ÑπÔ∏è  Commentaire de commit non ajout√© (pas un push sur main)"
          fi
          
          echo ""
          echo "üîó Voir les d√©tails: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"