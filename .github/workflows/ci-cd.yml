name: Django CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: mes_frais
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u test_user -ptest_password --protocol=tcp"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_password
          MONGO_INITDB_DATABASE: mes_frais_logs
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create and activate virtualenv
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Wait for services to be ready
        run: |
          echo "Attente que les services soient prêts..."
          # Attendre MySQL
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -P 3306 -u test_user -ptest_password -e "SELECT 1;" 2>/dev/null; then
              echo "MySQL est prêt !"
              break
            fi
            echo "Attente MySQL... ($i/30)"
            sleep 2
          done
          
          # Attendre MongoDB
          for i in {1..30}; do
            if mongosh --host 127.0.0.1:27017 -u test_user -p test_password --authenticationDatabase admin --quiet --eval "db.runCommand({ping: 1})" 2>/dev/null; then
              echo "MongoDB est prêt !"
              break
            fi
            echo "Attente MongoDB... ($i/30)"
            sleep 2
          done

      - name: Check services
        run: |
          echo "Vérification finale des services..."
          netstat -tuln | grep :3306 || echo "MySQL port non trouvé"
          netstat -tuln | grep :27017 || echo "MongoDB port non trouvé"
          mysql -h 127.0.0.1 -P 3306 -u test_user -ptest_password -e "SELECT 'MySQL OK';"
          mongosh --host 127.0.0.1:27017 -u test_user -p test_password --authenticationDatabase admin --quiet --eval "print('MongoDB OK')"

      - name: Run migrations
        env:
          SECRET_KEY: test-secret-key-for-github-actions
          DB_NAME: mes_frais
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: localhost
          DB_PORT: 3306
          MONGODB_HOST: localhost
          MONGODB_PORT: 27017
          MONGODB_DATABASE: mes_frais_logs
          MONGODB_USERNAME: test_user
          MONGODB_PASSWORD: test_password
          MONGODB_AUTH_SOURCE: admin
        run: |
          source venv/bin/activate
          python manage.py migrate --noinput

      - name: Run tests
        env:
          SECRET_KEY: test-secret-key-for-github-actions
          DB_NAME: mes_frais
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: localhost
          DB_PORT: 3306
          MONGODB_HOST: localhost
          MONGODB_PORT: 27017
          MONGODB_DATABASE: mes_frais_logs
          MONGODB_USERNAME: test_user
          MONGODB_PASSWORD: test_password
          MONGODB_AUTH_SOURCE: admin
        run: |
          source venv/bin/activate
          python manage.py test

      - name: Collect static files
        env:
          SECRET_KEY: test-secret-key-for-github-actions
          DB_NAME: mes_frais
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: localhost
          DB_PORT: 3306
          MONGODB_HOST: localhost
          MONGODB_PORT: 27017
          MONGODB_DATABASE: mes_frais_logs
          MONGODB_USERNAME: test_user
          MONGODB_PASSWORD: test_password
          MONGODB_AUTH_SOURCE: admin
        run: |
          source venv/bin/activate
          python manage.py collectstatic --noinput

      - name: Deploy to server
        if: github.event_name == 'push'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts

          ssh -i ~/.ssh/deploy_key $SERVER_USER@$SERVER_IP << 'EOF'
            cd ${{ secrets.PROJECT_PATH }}
            git pull origin main
            source ${{ secrets.VENV_PATH }}/bin/activate
            pip install -r requirements.txt
            python manage.py migrate --noinput
            python manage.py collectstatic --noinput
            sudo systemctl restart ${{ secrets.SERVICE_NAME }}
          EOF